generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             String               @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  email          String               @unique @db.VarChar(255)
  passwordHash   String               @map("password_hash") @db.VarChar(255)
  name           String               @db.VarChar(100)
  phone          String?              @db.VarChar(20)
  avatarUrl      String?              @map("avatar_url") @db.VarChar(500)
  emailVerified  Boolean?             @default(false) @map("email_verified")
  isActive       Boolean?             @default(true) @map("is_active")
  createdAt      DateTime?            @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt      DateTime?            @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)
  lastLogin      DateTime?            @map("last_login") @db.Timestamptz(6)
  accounts       Account[]
  budgets        Budget[]
  categories     Category[]
  goals          Goal[]
  passwordResets PasswordResetToken[]
  transactions   Transaction[]
  transfers      Transfer[]
  sessions       UserSession[]

  @@index([email], map: "idx_users_email")
  @@map("users")
}

model Category {
  id           String        @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  userId       String        @map("user_id") @db.Uuid
  name         String        @db.VarChar(50)
  color        String?       @default("#3B82F6") @db.VarChar(7)
  icon         String?       @default("dollar-sign") @db.VarChar(50)
  type         String        @db.VarChar(10)
  isDefault    Boolean?      @default(false) @map("is_default")
  createdAt    DateTime?     @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt    DateTime?     @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)
  budgets      Budget[]
  user         User          @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  transactions Transaction[]

  @@index([type], map: "idx_categories_type")
  @@index([userId], map: "idx_categories_user_id")
  @@map("categories")
}

model Account {
  id            String        @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  userId        String        @map("user_id") @db.Uuid
  name          String        @db.VarChar(100)
  type          String        @db.VarChar(20)
  balance       Decimal?      @default(0.00) @db.Decimal(15, 2)
  currency      String?       @default("BRL") @db.VarChar(3)
  bankName      String?       @map("bank_name") @db.VarChar(100)
  accountNumber String?       @map("account_number") @db.VarChar(50)
  isActive      Boolean?      @default(true) @map("is_active")
  createdAt     DateTime?     @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt     DateTime?     @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)
  user          User          @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  transactions  Transaction[]
  transfersFrom Transfer[]    @relation("TransferFrom")
  transfersTo   Transfer[]    @relation("TransferTo")

  @@index([userId], map: "idx_accounts_user_id")
  @@map("accounts")
}

model Transaction {
  id                 String    @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  userId             String    @map("user_id") @db.Uuid
  accountId          String    @map("account_id") @db.Uuid
  categoryId         String?   @map("category_id") @db.Uuid
  amount             Decimal   @db.Decimal(15, 2)
  type               String    @db.VarChar(10)
  description        String?   @db.VarChar(255)
  notes              String?
  transactionDate    DateTime  @map("transaction_date") @db.Date
  isRecurring        Boolean?  @default(false) @map("is_recurring")
  recurringFrequency String?   @map("recurring_frequency") @db.VarChar(10)
  tags               String[]
  createdAt          DateTime? @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt          DateTime? @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)
  account            Account   @relation(fields: [accountId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  category           Category? @relation(fields: [categoryId], references: [id], onUpdate: NoAction)
  user               User      @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([accountId], map: "idx_transactions_account_id")
  @@index([categoryId], map: "idx_transactions_category_id")
  @@index([transactionDate], map: "idx_transactions_date")
  @@index([type], map: "idx_transactions_type")
  @@index([userId], map: "idx_transactions_user_id")
  @@map("transactions")
}

model Transfer {
  id            String    @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  userId        String    @map("user_id") @db.Uuid
  fromAccountId String    @map("from_account_id") @db.Uuid
  toAccountId   String    @map("to_account_id") @db.Uuid
  amount        Decimal   @db.Decimal(15, 2)
  description   String?   @db.VarChar(255)
  transferDate  DateTime  @map("transfer_date") @db.Date
  createdAt     DateTime? @default(now()) @map("created_at") @db.Timestamptz(6)
  fromAccount   Account   @relation("TransferFrom", fields: [fromAccountId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  toAccount     Account   @relation("TransferTo", fields: [toAccountId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  user          User      @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([userId], map: "idx_transfers_user_id")
  @@map("transfers")
}

model Goal {
  id            String    @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  userId        String    @map("user_id") @db.Uuid
  name          String    @db.VarChar(100)
  description   String?
  targetAmount  Decimal   @map("target_amount") @db.Decimal(15, 2)
  currentAmount Decimal?  @default(0.00) @map("current_amount") @db.Decimal(15, 2)
  targetDate    DateTime? @map("target_date") @db.Date
  color         String?   @default("#10B981") @db.VarChar(7)
  icon          String?   @default("target") @db.VarChar(50)
  isAchieved    Boolean?  @default(false) @map("is_achieved")
  createdAt     DateTime? @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt     DateTime? @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)
  user          User      @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([userId], map: "idx_goals_user_id")
  @@map("goals")
}

model Budget {
  id          String    @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  userId      String    @map("user_id") @db.Uuid
  categoryId  String?   @map("category_id") @db.Uuid
  name        String    @db.VarChar(100)
  amount      Decimal   @db.Decimal(15, 2)
  spentAmount Decimal?  @default(0.00) @map("spent_amount") @db.Decimal(15, 2)
  period      String?   @default("monthly") @db.VarChar(10)
  startDate   DateTime  @map("start_date") @db.Date
  endDate     DateTime  @map("end_date") @db.Date
  isActive    Boolean?  @default(true) @map("is_active")
  createdAt   DateTime? @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt   DateTime? @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)
  category    Category? @relation(fields: [categoryId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([userId], map: "idx_budgets_user_id")
  @@map("budgets")
}

model UserSession {
  id        String    @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  userId    String    @map("user_id") @db.Uuid
  token     String    @unique @db.VarChar(255)
  expiresAt DateTime  @map("expires_at") @db.Timestamptz(6)
  createdAt DateTime? @default(now()) @map("created_at") @db.Timestamptz(6)
  userAgent String?   @map("user_agent")
  ipAddress String?   @map("ip_address") @db.Inet
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([token], map: "idx_user_sessions_token")
  @@index([userId], map: "idx_user_sessions_user_id")
  @@map("user_sessions")
}

model PasswordResetToken {
  id        String    @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  userId    String    @map("user_id") @db.Uuid
  token     String    @unique @db.VarChar(255)
  expiresAt DateTime  @map("expires_at") @db.Timestamptz(6)
  used      Boolean?  @default(false)
  createdAt DateTime? @default(now()) @map("created_at") @db.Timestamptz(6)
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([token], map: "idx_password_reset_tokens_token")
  @@map("password_reset_tokens")
}
